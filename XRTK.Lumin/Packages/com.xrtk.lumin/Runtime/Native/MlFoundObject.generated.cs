//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native
{
    using System.Runtime.InteropServices;

    internal static class MlFoundObject
    {
        /// <summary>
        /// Maximum char size for a label
        /// </summary>
        public const int MLFoundObject_MaxLabelSize = unchecked((int)64);

        /// <summary>
        /// Maximum char size for a property key
        /// </summary>
        public const int MLFoundObject_MaxPropertyKeySize = unchecked((int)64);

        /// <summary>
        /// Maximum char size for a property value
        /// </summary>
        public const int MLFoundObject_MaxPropertyValueSize = unchecked((int)64);

        /// <summary>
        /// Properties are key value pairs used for either filters or characteristics of an object
        /// </summary>
        /// <remarks>
        /// Examples: {"label": "chair"}, {"score", "09"}, {"class": "furniture"}, {"seen_count", "3"}, etc
        /// The following properties are currently supported: ["label", "score"]
        /// "label" can be one of the following: ["sofa", "chair", "table", "poster", "screen"]
        /// "score" is value between [0,1] with 1 indicating high confidence
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLFoundObjectProperty
        {
            /// <summary>
            /// Key for an objects property
            /// </summary>
            /// <remarks>
            /// Type is string Max size is defined by MLFoundObject_MaxPropertyKeySize
            /// Example of a key would be 'label'
            /// </remarks>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
            public string key;

            /// <summary>
            /// Value for an objects property
            /// </summary>
            /// <remarks>
            /// Type is string Max size is defined by MLFoundObject_MaxPropertyValueSize
            /// Example of a value would be 'chair'
            /// </remarks>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
            public string value;

            /// <summary>
            /// Last time this object was updated in UTC time
            /// </summary>
            /// <remarks>
            /// Note: This field should not be filled when used for creating a query
            /// </remarks>
            public ulong last_update_epoch_time_ns;
        }

        /// <summary>
        /// Struct used to compose a query
        /// </summary>
        /// <remarks>
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLFoundObjectQueryFilter
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Valid ID for a found object
            /// </summary>
            /// <remarks>
            /// This can be obtained from sources such as a prior session If the id is set
            /// to 0 then the query will not be filtered using id
            /// </remarks>
            public MlTypes.MLUUID id;

            /// <summary>
            /// Properties to be used as filters for the query
            /// </summary>
            /// <remarks>
            /// If the properties are not provided then the query will not be filtered using
            /// properties Filtering is done via direct string matching
            /// </remarks>
            public IntPtr properties;

            /// <summary>
            /// Number of attributes
            /// </summary>
            public uint properties_count;

            /// <summary>
            /// Vector3 float of where you want the spatial query to originate
            /// </summary>
            public MlTypes.MLVec3f center;

            /// <summary>
            /// Vector3 float of the max distance you want the spatial query to span relative
            /// to the center of the query
            /// </summary>
            /// <remarks>
            /// If the max distance is set to 0 then the query will not be filtered using max_distance
            /// </remarks>
            public MlTypes.MLVec3f max_distance;

            /// <summary>
            /// Maximum number of results Used to allocate memory
            /// </summary>
            public uint max_results;
        }

        /// <summary>
        /// Struct to represent a Found Object
        /// </summary>
        /// <remarks>
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLFoundObject
        {
            /// <summary>
            /// Identifier of the Found Object
            /// </summary>
            /// <remarks>
            /// The system will attempt to persist IDs when it can be reasonably sure an
            /// object has already been assigned an ID in a previous session
            /// </remarks>
            public MlTypes.MLUUID id;

            /// <summary>
            /// Number of properties
            /// </summary>
            public uint property_count;

            /// <summary>
            /// Center position of found object
            /// </summary>
            public MlTypes.MLVec3f position;

            /// <summary>
            /// Rotation of found object
            /// </summary>
            public MlTypes.MLQuaternionf rotation;

            /// <summary>
            /// Vector3 extents of the object where each dimension is defined as max-min
            /// </summary>
            public MlTypes.MLVec3f size;
        }

        /// <summary>
        /// Configure the tracker to set defaults
        /// </summary>
        /// <remarks>
        /// Values that go out of bounds will be clamped to system ceiling/roof Allows
        /// for tuning the frequency and quantity of object updates as well as the
        /// maximum result per query
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLFoundObjectTrackerSettings
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Max result returned by a query
            /// </summary>
            public uint max_query_result;

            /// <summary>
            /// Maximum number of found objects to be stored
            /// </summary>
            public uint max_object_cache;
        }

        /// <summary>
        /// Create a Found Object Query tracker
        /// MLResult_InvalidParam The parameter out_handle was not valid (null)
        /// MLResult_Ok Found object tracker was created successfully
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Failed to create the found object tracker
        /// </summary>
        /// <param name="out_handle">A pointer to an MLHandle which will contain the handle of the found object tracker
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectTrackerCreate(ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Update the tracker settings
        /// MLResult_Ok Settings successfully set to initial settings
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to a found object tracker</param>
        /// <param name="settings">Pointer to MLFoundObjectTrackerSettings</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectTrackerUpdateSettings(MlApi.MLHandle tracker_handle, in MlFoundObject.MLFoundObjectTrackerSettings settings);

        /// <summary>
        /// Create a new Found Object Query
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to a found object tracker</param>
        /// <param name="query">Query filter to apply during the query</param>
        /// <param name="out_query_handle">Pointer to an MLHandle to hold the handle to the query object</param>
        /// <remarks>
        /// Creates a new query for requesting found objects Query criteria is
        /// specified by filling out the MLFoundObjectQueryFilter Multiple queries
        /// can be submitted
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectQuery(MlApi.MLHandle tracker_handle, in MlFoundObject.MLFoundObjectQueryFilter query, ref MlApi.MLHandle out_query_handle);

        /// <summary>
        /// Gets the result count of a query
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to a found object tracker</param>
        /// <param name="query_handle">Handle of an active query</param>
        /// <param name="out_num_results">The number of max results from the query</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetResultCount(MlApi.MLHandle tracker_handle, MlApi.MLHandle query_handle, ref uint out_num_results);

        /// <summary>
        /// Get the result of a submitted query
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to a found object query tracker</param>
        /// <param name="query_handle">Handle of an active query</param>
        /// <param name="index">Index of a found object result</param>
        /// <param name="out_found_object">Pointer to a MLFoundObject array</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetResult(MlApi.MLHandle tracker_handle, MlApi.MLHandle query_handle, uint index, ref MlFoundObject.MLFoundObject out_found_object);

        /// <summary>
        /// Gets the property information for a found object ID by index
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to a found object tracker</param>
        /// <param name="id">MLUUID of a found object</param>
        /// <param name="index">Index of a found object property</param>
        /// <param name="out_property">MLFoundObjectProperty for a found object</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetProperty(MlApi.MLHandle tracker_handle, MlTypes.MLUUID id, uint index, ref MlFoundObject.MLFoundObjectProperty out_property);

        /// <summary>
        /// Returns the count for all the unique labels available in the environment you are currently in
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to a found object tracker</param>
        /// <param name="out_unique_label_count">Count of all the unique labels in the area</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetAvailableLabelsCount(MlApi.MLHandle tracker_handle, ref uint out_unique_label_count);

        /// <summary>
        /// Returns the unique label by index in the area you are currently in
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_PrivilegeDenied Privileges not met
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to a found object tracker</param>
        /// <param name="unique_label_index">Index of the unique label you are fetching</param>
        /// <param name="buffer_size">Size of the buffer the out_label will be written to</param>
        /// <param name="out_label">Pointer that will be used to write the label to</param>
        /// <remarks>
        /// Each found object has a label To facilitate better understanding of the
        /// environment, you can get all the unique labels in the area This is used for
        /// discovering what is available in the user's area Unique labels have the
        /// potential to change and expand as the area is explored
        /// @apilevel 8
        /// @priv ObjectData
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectGetUniqueLabel(MlApi.MLHandle tracker_handle, uint unique_label_index, uint buffer_size, IntPtr out_label);

        /// <summary>
        /// Releases the resources assigned to the tracker
        /// MLResult_InvalidParam Invalid parameter
        /// MLResult_Ok Returned a valid MLHandle
        /// MLResult_UnspecifiedFailure Unspecified failure
        /// </summary>
        /// <param name="tracker_handle">Handle to the found object tracker</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLFoundObjectTrackerDestroy(MlApi.MLHandle tracker_handle);
    }
}
