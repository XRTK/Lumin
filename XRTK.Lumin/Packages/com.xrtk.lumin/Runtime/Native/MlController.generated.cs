//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XRTK.Lumin.Native
{
    using System.Runtime.InteropServices;

    internal static class MlController
    {
        /// <summary>
        /// A set of possible tracking modes for the Controller system
        /// </summary>
        public enum MLControllerMode : int
        {
            /// <summary>
            /// Imu 3 degree of freedom tracking (orientation only)
            /// </summary>
            Imu3Dof = unchecked((int)0),

            /// <summary>
            /// Em 6 degrees of freedom tracking (position and orientation)
            /// </summary>
            Em6Dof = unchecked((int)1),

            /// <summary>
            /// High quality Em fused with Imu 6 degrees of freedom tracking (position and orientation)
            /// </summary>
            Fused6Dof = unchecked((int)2),

            /// <summary>
            /// Count of number of modes
            /// </summary>
            MLControllerMode_Count,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLControllerMode_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Count of number of modes
        /// </summary>
        public const int MLControllerMode_Count = (int)MLControllerMode.MLControllerMode_Count;

        /// <summary>
        /// Maximum number of active Controllers
        /// </summary>
        public const int MLController_MaxActive = unchecked((int)2);

        /// <summary>
        /// Calibration Accuracy levels for Controller
        /// </summary>
        public enum MLControllerCalibAccuracy : int
        {
            /// <summary>
            /// CalAccuracy is Bad
            /// </summary>
            Bad = unchecked((int)0),

            /// <summary>
            /// CalAccuracy is Low
            /// </summary>
            Low = unchecked((int)1),

            /// <summary>
            /// CalAccuracy is Medium
            /// </summary>
            Medium = unchecked((int)2),

            /// <summary>
            /// CalAccuracy is High
            /// </summary>
            High = unchecked((int)3),
        }

        /// <summary>
        /// Struct to configure controller's tracking-modes
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLControllerConfiguration
        {
            /// <summary>
            /// Imu only 3 degree of freedom tracking (orientation only)
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool enable_imu3dof;

            /// <summary>
            /// Em only 6 degrees of freedom tracking (position and orientation)
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool enable_em6dof;

            /// <summary>
            /// High quality Em fused with Imu 6 degrees of freedom tracking (position and orientation)
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool enable_fused6dof;

            public static MLControllerConfiguration Default => new MLControllerConfiguration { enable_imu3dof = false, enable_em6dof = true, enable_fused6dof = true };
        }

        /// <summary>
        /// A structure containing information about the tracking-stream of this Controller
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLControllerStream
        {
            /// <summary>
            /// Coordinate frame identifier for this Controller
            /// </summary>
            public MlTypes.MLCoordinateFrameUID coord_frame_controller;

            /// <summary>
            /// Flag to indicate if tracking-stream is active
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_active;

            /// <summary>
            /// Mode of the given controller stream
            /// </summary>
            public MlController.MLControllerMode mode;

            public MlTypes.MLTransform Transform { get; set; }

            public override string ToString()
            {
                return $"{nameof(is_active)}?{is_active}|{nameof(mode)}:{mode}";
            }
        }

        /// <summary>
        /// Information about the current state of this Controller
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLControllerState
        {
            /// <summary>
            /// ID of this controller (1 or 2)
            /// </summary>
            public byte controller_id;

            /// <summary>
            /// Current controller's tracking streams
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)]
            public MlController.MLControllerStream[] stream;

            /// <summary>
            /// Calibration accuracy for the current Controller
            /// </summary>
            public MlController.MLControllerCalibAccuracy accuracy;

            public override string ToString()
            {
                return $"{nameof(controller_id)}:{controller_id}|{nameof(accuracy)}:{accuracy}\n{stream[0]}\n{stream[1]}\n{stream[2]}";
            }
        }

        /// <summary>
        /// Information about the current state of the Controller system
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLControllerSystemState
        {
            /// <summary>
            /// State objects for each connected and active Controller
            /// </summary>
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
            public MlController.MLControllerState[] controller_state;

            /// <summary>
            /// Calibration accuracy for the Lightwear
            /// </summary>
            public MlController.MLControllerCalibAccuracy lightwear_accuracy;

            public override string ToString()
            {
                return $"{nameof(lightwear_accuracy)}:{lightwear_accuracy}\n{controller_state[0]}\n{controller_state[1]}";
            }
        }

        /// <summary>
        /// Create a Controller Tracker
        /// @apilevel 4
        /// MLResult_InvalidParam One of the parameters was not valid (null)
        /// MLResult_Ok Controller Tracker was created successfully
        /// MLResult_PrivilegeDenied The application lacks privilege
        /// MLResult_UnspecifiedFailure Controller Tracker was not created due to an internal error
        /// </summary>
        /// <param name="mode">A pointer to MLControllerConfiguration struct which contains the tracking modes to use for this session</param>
        /// <param name="out_handle">A pointer to an MLHandle which will the handle to the controller tracker
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <remarks>
        /// @priv ControllerPose
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLControllerCreateEx(in MlController.MLControllerConfiguration mode, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Destroy a Controller Tracker
        /// MLResult_Ok Controller Tracker was destroyed successfully
        /// MLResult_UnspecifiedFailure Failed to destroy the Controller Tracker due to an internal error
        /// </summary>
        /// <param name="tracker">MLHandle to the tracker created by MLControllerCreate</param>
        /// <remarks>
        /// @priv ControllerPose
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLControllerDestroy(MlApi.MLHandle tracker);

        /// <summary>
        /// Return the most recent Controller state
        /// MLResult_InvalidParam The parameter out_state was not valid (null)
        /// MLResult_Ok @c out_state has been filled with current state
        /// MLResult_PrivilegeDenied The application lacks privilege
        /// MLResult_UnspecifiedFailure Failed to get the Controller state due to an internal error
        /// </summary>
        /// <param name="handle">Handle to the tracker created by MLControllerCreate</param>
        /// <param name="out_state">Pointer to valid MLControllerSystemState object to be filled with
        /// current state information</param>
        /// <remarks>
        /// @priv ControllerPose
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLControllerGetState(MlApi.MLHandle handle, ref MlController.MLControllerSystemState out_state);
    }
}
