//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Runtime.Native
{
    using System.Runtime.InteropServices;

    internal static class MlArucoTracking
    {
        /// <summary>
        /// Supported pre-defined dictionary names
        /// http://chevme/arucogen/
        /// </summary>
        /// <remarks>
        /// ArUco Tracker supports pre-defined dictionary names
        /// Some of these dictionaries can be looked up and markers can be generated for them here:
        /// </remarks>
        public enum MLArucoDictionaryName : int
        {
            MLArucoDictionaryName_DICT_4X4_50 = unchecked((int)0),

            /// <summary>
            /// 4 by 4 pixel ArUco marker dictionary with 50 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_4X4_100,

            /// <summary>
            /// 4 by 4 pixel ArUco marker dictionary with 100 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_4X4_250,

            /// <summary>
            /// 4 by 4 pixel ArUco marker dictionary with 250 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_4X4_1000,

            /// <summary>
            /// 4 by 4 pixel ArUco marker dictionary with 1000 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_5X5_50,

            /// <summary>
            /// 5 by 5 pixel ArUco marker dictionary with 50 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_5X5_100,

            /// <summary>
            /// 5 by 5 pixel ArUco marker dictionary with 100 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_5X5_250,

            /// <summary>
            /// 5 by 5 pixel ArUco marker dictionary with 250 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_5X5_1000,

            /// <summary>
            /// 5 by 5 pixel ArUco marker dictionary with 1000 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_6X6_50,

            /// <summary>
            /// 6 by 6 pixel ArUco marker dictionary with 50 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_6X6_100,

            /// <summary>
            /// 6 by 6 pixel ArUco marker dictionary with 100 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_6X6_250,

            /// <summary>
            /// 6 by 6 pixel ArUco marker dictionary with 250 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_6X6_1000,

            /// <summary>
            /// 6 by 6 pixel ArUco marker dictionary with 1000 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_7X7_50,

            /// <summary>
            /// 7 by 7 pixel ArUco marker dictionary with 50 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_7X7_100,

            /// <summary>
            /// 7 by 7 pixel ArUco marker dictionary with 100 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_7X7_250,

            /// <summary>
            /// 7 by 7 pixel ArUco marker dictionary with 250 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_7X7_1000,

            /// <summary>
            /// 7 by 7 pixel ArUco marker dictionary with 1000 IDs
            /// </summary>
            MLArucoDictionaryName_DICT_ARUCO_ORIGINAL,
        }

        /// <summary>
        /// Represents the result for a single marker
        /// </summary>
        /// <remarks>
        /// A list of these detections will be returned by the Aruco Tracker, after processing a video
        /// frame succesfully
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLArucoTrackerResult
        {
            /// <summary>
            /// Unique marker ID as defined in selected MLArucoDictionaryName
            /// </summary>
            public int id;

            /// <summary>
            /// MLCoordinateFrameUID of the marker
            /// </summary>
            /// <remarks>
            /// This should be passed to the MLSnapshotGetTransform function to get
            /// the 6 DOF pose of the marker
            /// </remarks>
            public MlTypes.MLCoordinateFrameUID coord_frame_marker;

            /// <summary>
            /// The reprojection error of this marker detection in degrees
            /// </summary>
            /// <remarks>
            /// A high reprojection error means that the estimated pose of the marker doesn't match well with
            /// the 2D detection on the processed video frame and thus the pose might be inaccurate The error
            /// is given in degrees, signifying by how much either camera or marker would have to be moved or
            /// rotated to create a perfect reprojection
            /// </remarks>
            public float reprojection_err;
        }

        /// <summary>
        /// An array of all the marker results from the Aruco Tracker
        /// </summary>
        /// <remarks>
        /// Only markers that belong to the dictionary with which the tracker was configured with will be
        /// found in this array
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLArucoTrackerResultArray
        {
            /// <summary>
            /// Pointer to an array of pointers for MLArucoTrackerResult
            /// </summary>
            public IntPtr detections;

            /// <summary>
            /// Number of markers being tracked
            /// </summary>
            public ulong count;
        }

        /// <summary>
        /// ArUco Tracker Settings
        /// </summary>
        /// <remarks>
        /// When creating the ArUco Tracker, this list of settings needs to be passed to configure the tracker
        /// properly The tracker will only output detections of markers that belong to the defined dictionary
        /// and the estimated poses will only be correct if the marker length has been set correctly
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLArucoTrackerSettings
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Dictionary from which markers shall be tracked
            /// </summary>
            public MlArucoTracking.MLArucoDictionaryName dictionary;

            /// <summary>
            /// The length of the markers that shall be tracked
            /// </summary>
            /// <remarks>
            /// The marker length is important to know, because once a marker is detected we can only determine
            /// its 3D position if we know how large it is in real life
            /// The length of a marker is given in meters and represents the distance between the four dominant
            /// corners of the squared marker
            /// </remarks>
            public float marker_length;

            /// <summary>
            /// If @c true, ArUco tracker will detect and track markers
            /// </summary>
            /// <remarks>
            /// ArUco Tracker should be disabled when app is paused and enabled when app resumes
            /// When enabled, ArUco Tracker will gain access to the camera and start tracking images
            /// When disabled ArUco Tracker will release the camera and stop tracking markers
            /// Internal state of the tracker will be maintained
            /// </remarks>
            [MarshalAs(UnmanagedType.U1)]
            public bool enable_marker_tracking;
        }

        /// <summary>
        /// Create an ArUco Tracker
        /// MLResult_InvalidParam Failed to create ArUco Tracker due to invalid out_handle
        /// MLResult_Ok Successfully created ArUco Tracker
        /// MLResult_PrivilegeDenied Failed to create tracker due to lack of privilege(s)
        /// MLResult_UnspecifiedFailure Failed to create the ArUco Tracker due to an internal error
        /// </summary>
        /// <param name="settings">List of settings of type MLArucoTrackerSettings that configure the tracker</param>
        /// <param name="out_handle">A pointer to an MLHandle to the newly created ArUco Tracker
        /// If this operation fails, out_handle will be ML_INVALID_HANDLE</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv CameraCapture, LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLArucoTrackerCreate(in MlArucoTracking.MLArucoTrackerSettings settings, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Update the ArUco Tracker with new settings
        /// MLResult_InvalidParam Failed to update the settings due to invalid tracker_settings
        /// MLResult_Ok Successfully updated the ArUco Tracker settings
        /// MLResult_PrivilegeDenied Failed to update the settings due to lack of privilege(s)
        /// MLResult_UnspecifiedFailure Failed to update the settings due to an internal error
        /// </summary>
        /// <param name="tracker_handle">MLHandle to the ArUco Tracker created by MLArucoTrackerCreate</param>
        /// <param name="tracker_settings">List of new ArUco Tracker settings</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv CameraCapture, LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLArucoTrackerUpdateSettings(MlApi.MLHandle tracker_handle, in MlArucoTracking.MLArucoTrackerSettings tracker_settings);

        /// <summary>
        /// Destroy an ArUco Tracker
        /// MLResult_Ok Successfully destroyed the ArUco Tracker
        /// MLResult_UnspecifiedFailure Failed to destroy the tracker due to an internal error
        /// </summary>
        /// <param name="tracker_handle">MLHandle to the ArUco Tracker created by MLArucoTrackerCreate</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv CameraCapture, LowLatencyLightwear
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLArucoTrackerDestroy(MlApi.MLHandle tracker_handle);

        /// <summary>
        /// Get the results for Aurco Tracking
        /// MLResult_InvalidParam Failed to return detection data due to invalid out_data
        /// MLResult_Ok Successfully fetched and returned all detections
        /// MLResult_UnspecifiedFailure Failed to return detections due to an internal error
        /// </summary>
        /// <param name="tracker_handle">MLHandle to the ArUco Tracker created by MLArucoTrackerCreate</param>
        /// <param name="out_data">Pointer to an array of pointers to MLArucoTrackerResult 
        /// The content will be freed by the MLArucoTrackerReleaseResult</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLArucoTrackerGetResult(MlApi.MLHandle tracker_handle, ref MlArucoTracking.MLArucoTrackerResultArray out_data);

        /// <summary>
        /// Release the resources for the results array
        /// MLResult_InvaldParam Failed to free structure due to invalid data
        /// MLResult_Ok Successfully freed data structure
        /// MLResult_UnspecifiedFailure Failed to free data due to an internal error
        /// </summary>
        /// <param name="data">The list of detections to be freed</param>
        /// <remarks>
        /// @apilevel 8
        /// @priv None
        /// </remarks>
        [DllImport("ml_perception_client", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLArucoTrackerReleaseResult(ref MlArucoTracking.MLArucoTrackerResultArray data);
    }
}
