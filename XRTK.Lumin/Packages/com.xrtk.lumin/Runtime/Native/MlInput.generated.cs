//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace XRTK.Lumin.Native
{
    using System.Runtime.InteropServices;

    /// <summary>
    /// APIs for the Input system
    /// </summary>
    /// <remarks>
    /// @sharedobject ml_input
    /// </remarks>
    internal static class MlInput
    {
        /// <summary>
        /// Maximum recognized number of input controllers
        /// </summary>
        public const int MLInput_MaxControllers = 2;

        /// <summary>
        /// Maximum recognized number of controller touchpad touches
        /// </summary>
        public const int MLInput_MaxControllerTouchpadTouches = 2;

        /// <summary>
        /// Keycodes defined for Magic Leap platform
        /// </summary>
        public enum MLKeyCode : int
        {
            MLKEYCODE_UNKNOWN = unchecked((int)0),

            MLKEYCODE_SOFT_LEFT = unchecked((int)1),

            MLKEYCODE_SOFT_RIGHT = unchecked((int)2),

            MLKEYCODE_HOME = unchecked((int)3),

            MLKEYCODE_BACK = unchecked((int)4),

            MLKEYCODE_CALL = unchecked((int)5),

            MLKEYCODE_ENDCALL = unchecked((int)6),

            MLKEYCODE_0 = unchecked((int)7),

            MLKEYCODE_1 = unchecked((int)8),

            MLKEYCODE_2 = unchecked((int)9),

            MLKEYCODE_3 = unchecked((int)10),

            MLKEYCODE_4 = unchecked((int)11),

            MLKEYCODE_5 = unchecked((int)12),

            MLKEYCODE_6 = unchecked((int)13),

            MLKEYCODE_7 = unchecked((int)14),

            MLKEYCODE_8 = unchecked((int)15),

            MLKEYCODE_9 = unchecked((int)16),

            MLKEYCODE_STAR = unchecked((int)17),

            MLKEYCODE_POUND = unchecked((int)18),

            MLKEYCODE_DPAD_UP = unchecked((int)19),

            MLKEYCODE_DPAD_DOWN = unchecked((int)20),

            MLKEYCODE_DPAD_LEFT = unchecked((int)21),

            MLKEYCODE_DPAD_RIGHT = unchecked((int)22),

            MLKEYCODE_DPAD_CENTER = unchecked((int)23),

            MLKEYCODE_VOLUME_UP = unchecked((int)24),

            MLKEYCODE_VOLUME_DOWN = unchecked((int)25),

            MLKEYCODE_POWER = unchecked((int)26),

            MLKEYCODE_CAMERA = unchecked((int)27),

            MLKEYCODE_CLEAR = unchecked((int)28),

            MLKEYCODE_A = unchecked((int)29),

            MLKEYCODE_B = unchecked((int)30),

            MLKEYCODE_C = unchecked((int)31),

            MLKEYCODE_D = unchecked((int)32),

            MLKEYCODE_E = unchecked((int)33),

            MLKEYCODE_F = unchecked((int)34),

            MLKEYCODE_G = unchecked((int)35),

            MLKEYCODE_H = unchecked((int)36),

            MLKEYCODE_I = unchecked((int)37),

            MLKEYCODE_J = unchecked((int)38),

            MLKEYCODE_K = unchecked((int)39),

            MLKEYCODE_L = unchecked((int)40),

            MLKEYCODE_M = unchecked((int)41),

            MLKEYCODE_N = unchecked((int)42),

            MLKEYCODE_O = unchecked((int)43),

            MLKEYCODE_P = unchecked((int)44),

            MLKEYCODE_Q = unchecked((int)45),

            MLKEYCODE_R = unchecked((int)46),

            MLKEYCODE_S = unchecked((int)47),

            MLKEYCODE_T = unchecked((int)48),

            MLKEYCODE_U = unchecked((int)49),

            MLKEYCODE_V = unchecked((int)50),

            MLKEYCODE_W = unchecked((int)51),

            MLKEYCODE_X = unchecked((int)52),

            MLKEYCODE_Y = unchecked((int)53),

            MLKEYCODE_Z = unchecked((int)54),

            MLKEYCODE_COMMA = unchecked((int)55),

            MLKEYCODE_PERIOD = unchecked((int)56),

            MLKEYCODE_ALT_LEFT = unchecked((int)57),

            MLKEYCODE_ALT_RIGHT = unchecked((int)58),

            MLKEYCODE_SHIFT_LEFT = unchecked((int)59),

            MLKEYCODE_SHIFT_RIGHT = unchecked((int)60),

            MLKEYCODE_TAB = unchecked((int)61),

            MLKEYCODE_SPACE = unchecked((int)62),

            MLKEYCODE_SYM = unchecked((int)63),

            MLKEYCODE_EXPLORER = unchecked((int)64),

            MLKEYCODE_ENVELOPE = unchecked((int)65),

            MLKEYCODE_ENTER = unchecked((int)66),

            MLKEYCODE_DEL = unchecked((int)67),

            MLKEYCODE_GRAVE = unchecked((int)68),

            MLKEYCODE_MINUS = unchecked((int)69),

            MLKEYCODE_EQUALS = unchecked((int)70),

            MLKEYCODE_LEFT_BRACKET = unchecked((int)71),

            MLKEYCODE_RIGHT_BRACKET = unchecked((int)72),

            MLKEYCODE_BACKSLASH = unchecked((int)73),

            MLKEYCODE_SEMICOLON = unchecked((int)74),

            MLKEYCODE_APOSTROPHE = unchecked((int)75),

            MLKEYCODE_SLASH = unchecked((int)76),

            MLKEYCODE_AT = unchecked((int)77),

            MLKEYCODE_NUM = unchecked((int)78),

            MLKEYCODE_HEADSETHOOK = unchecked((int)79),

            MLKEYCODE_FOCUS = unchecked((int)80),

            MLKEYCODE_PLUS = unchecked((int)81),

            MLKEYCODE_MENU = unchecked((int)82),

            MLKEYCODE_NOTIFICATION = unchecked((int)83),

            MLKEYCODE_SEARCH = unchecked((int)84),

            MLKEYCODE_MEDIA_PLAY_PAUSE = unchecked((int)85),

            MLKEYCODE_MEDIA_STOP = unchecked((int)86),

            MLKEYCODE_MEDIA_NEXT = unchecked((int)87),

            MLKEYCODE_MEDIA_PREVIOUS = unchecked((int)88),

            MLKEYCODE_MEDIA_REWIND = unchecked((int)89),

            MLKEYCODE_MEDIA_FAST_FORWARD = unchecked((int)90),

            MLKEYCODE_MUTE = unchecked((int)91),

            MLKEYCODE_PAGE_UP = unchecked((int)92),

            MLKEYCODE_PAGE_DOWN = unchecked((int)93),

            MLKEYCODE_PICTSYMBOLS = unchecked((int)94),

            MLKEYCODE_SWITCH_CHARSET = unchecked((int)95),

            MLKEYCODE_BUTTON_A = unchecked((int)96),

            MLKEYCODE_BUTTON_B = unchecked((int)97),

            MLKEYCODE_BUTTON_C = unchecked((int)98),

            MLKEYCODE_BUTTON_X = unchecked((int)99),

            MLKEYCODE_BUTTON_Y = unchecked((int)100),

            MLKEYCODE_BUTTON_Z = unchecked((int)101),

            MLKEYCODE_BUTTON_L1 = unchecked((int)102),

            MLKEYCODE_BUTTON_R1 = unchecked((int)103),

            MLKEYCODE_BUTTON_L2 = unchecked((int)104),

            MLKEYCODE_BUTTON_R2 = unchecked((int)105),

            MLKEYCODE_BUTTON_THUMBL = unchecked((int)106),

            MLKEYCODE_BUTTON_THUMBR = unchecked((int)107),

            MLKEYCODE_BUTTON_START = unchecked((int)108),

            MLKEYCODE_BUTTON_SELECT = unchecked((int)109),

            MLKEYCODE_BUTTON_MODE = unchecked((int)110),

            MLKEYCODE_ESCAPE = unchecked((int)111),

            MLKEYCODE_FORWARD_DEL = unchecked((int)112),

            MLKEYCODE_CTRL_LEFT = unchecked((int)113),

            MLKEYCODE_CTRL_RIGHT = unchecked((int)114),

            MLKEYCODE_CAPS_LOCK = unchecked((int)115),

            MLKEYCODE_SCROLL_LOCK = unchecked((int)116),

            MLKEYCODE_META_LEFT = unchecked((int)117),

            MLKEYCODE_META_RIGHT = unchecked((int)118),

            MLKEYCODE_FUNCTION = unchecked((int)119),

            MLKEYCODE_SYSRQ = unchecked((int)120),

            MLKEYCODE_BREAK = unchecked((int)121),

            MLKEYCODE_MOVE_HOME = unchecked((int)122),

            MLKEYCODE_MOVE_END = unchecked((int)123),

            MLKEYCODE_INSERT = unchecked((int)124),

            MLKEYCODE_FORWARD = unchecked((int)125),

            MLKEYCODE_MEDIA_PLAY = unchecked((int)126),

            MLKEYCODE_MEDIA_PAUSE = unchecked((int)127),

            MLKEYCODE_MEDIA_CLOSE = unchecked((int)128),

            MLKEYCODE_MEDIA_EJECT = unchecked((int)129),

            MLKEYCODE_MEDIA_RECORD = unchecked((int)130),

            MLKEYCODE_F1 = unchecked((int)131),

            MLKEYCODE_F2 = unchecked((int)132),

            MLKEYCODE_F3 = unchecked((int)133),

            MLKEYCODE_F4 = unchecked((int)134),

            MLKEYCODE_F5 = unchecked((int)135),

            MLKEYCODE_F6 = unchecked((int)136),

            MLKEYCODE_F7 = unchecked((int)137),

            MLKEYCODE_F8 = unchecked((int)138),

            MLKEYCODE_F9 = unchecked((int)139),

            MLKEYCODE_F10 = unchecked((int)140),

            MLKEYCODE_F11 = unchecked((int)141),

            MLKEYCODE_F12 = unchecked((int)142),

            MLKEYCODE_NUM_LOCK = unchecked((int)143),

            MLKEYCODE_NUMPAD_0 = unchecked((int)144),

            MLKEYCODE_NUMPAD_1 = unchecked((int)145),

            MLKEYCODE_NUMPAD_2 = unchecked((int)146),

            MLKEYCODE_NUMPAD_3 = unchecked((int)147),

            MLKEYCODE_NUMPAD_4 = unchecked((int)148),

            MLKEYCODE_NUMPAD_5 = unchecked((int)149),

            MLKEYCODE_NUMPAD_6 = unchecked((int)150),

            MLKEYCODE_NUMPAD_7 = unchecked((int)151),

            MLKEYCODE_NUMPAD_8 = unchecked((int)152),

            MLKEYCODE_NUMPAD_9 = unchecked((int)153),

            MLKEYCODE_NUMPAD_DIVIDE = unchecked((int)154),

            MLKEYCODE_NUMPAD_MULTIPLY = unchecked((int)155),

            MLKEYCODE_NUMPAD_SUBTRACT = unchecked((int)156),

            MLKEYCODE_NUMPAD_ADD = unchecked((int)157),

            MLKEYCODE_NUMPAD_DOT = unchecked((int)158),

            MLKEYCODE_NUMPAD_COMMA = unchecked((int)159),

            MLKEYCODE_NUMPAD_ENTER = unchecked((int)160),

            MLKEYCODE_NUMPAD_EQUALS = unchecked((int)161),

            MLKEYCODE_NUMPAD_LEFT_PAREN = unchecked((int)162),

            MLKEYCODE_NUMPAD_RIGHT_PAREN = unchecked((int)163),

            MLKEYCODE_VOLUME_MUTE = unchecked((int)164),

            MLKEYCODE_INFO = unchecked((int)165),

            MLKEYCODE_CHANNEL_UP = unchecked((int)166),

            MLKEYCODE_CHANNEL_DOWN = unchecked((int)167),

            MLKEYCODE_ZOOM_IN = unchecked((int)168),

            MLKEYCODE_ZOOM_OUT = unchecked((int)169),

            MLKEYCODE_TV = unchecked((int)170),

            MLKEYCODE_WINDOW = unchecked((int)171),

            MLKEYCODE_GUIDE = unchecked((int)172),

            MLKEYCODE_DVR = unchecked((int)173),

            MLKEYCODE_BOOKMARK = unchecked((int)174),

            MLKEYCODE_CAPTIONS = unchecked((int)175),

            MLKEYCODE_SETTINGS = unchecked((int)176),

            MLKEYCODE_TV_POWER = unchecked((int)177),

            MLKEYCODE_TV_INPUT = unchecked((int)178),

            MLKEYCODE_STB_POWER = unchecked((int)179),

            MLKEYCODE_STB_INPUT = unchecked((int)180),

            MLKEYCODE_AVR_POWER = unchecked((int)181),

            MLKEYCODE_AVR_INPUT = unchecked((int)182),

            MLKEYCODE_PROG_RED = unchecked((int)183),

            MLKEYCODE_PROG_GREEN = unchecked((int)184),

            MLKEYCODE_PROG_YELLOW = unchecked((int)185),

            MLKEYCODE_PROG_BLUE = unchecked((int)186),

            MLKEYCODE_APP_SWITCH = unchecked((int)187),

            MLKEYCODE_BUTTON_1 = unchecked((int)188),

            MLKEYCODE_BUTTON_2 = unchecked((int)189),

            MLKEYCODE_BUTTON_3 = unchecked((int)190),

            MLKEYCODE_BUTTON_4 = unchecked((int)191),

            MLKEYCODE_BUTTON_5 = unchecked((int)192),

            MLKEYCODE_BUTTON_6 = unchecked((int)193),

            MLKEYCODE_BUTTON_7 = unchecked((int)194),

            MLKEYCODE_BUTTON_8 = unchecked((int)195),

            MLKEYCODE_BUTTON_9 = unchecked((int)196),

            MLKEYCODE_BUTTON_10 = unchecked((int)197),

            MLKEYCODE_BUTTON_11 = unchecked((int)198),

            MLKEYCODE_BUTTON_12 = unchecked((int)199),

            MLKEYCODE_BUTTON_13 = unchecked((int)200),

            MLKEYCODE_BUTTON_14 = unchecked((int)201),

            MLKEYCODE_BUTTON_15 = unchecked((int)202),

            MLKEYCODE_BUTTON_16 = unchecked((int)203),

            MLKEYCODE_LANGUAGE_SWITCH = unchecked((int)204),

            MLKEYCODE_MANNER_MODE = unchecked((int)205),

            MLKEYCODE_3D_MODE = unchecked((int)206),

            MLKEYCODE_CONTACTS = unchecked((int)207),

            MLKEYCODE_CALENDAR = unchecked((int)208),

            MLKEYCODE_MUSIC = unchecked((int)209),

            MLKEYCODE_CALCULATOR = unchecked((int)210),

            MLKEYCODE_ZENKAKU_HANKAKU = unchecked((int)211),

            MLKEYCODE_EISU = unchecked((int)212),

            MLKEYCODE_MUHENKAN = unchecked((int)213),

            MLKEYCODE_HENKAN = unchecked((int)214),

            MLKEYCODE_KATAKANA_HIRAGANA = unchecked((int)215),

            MLKEYCODE_YEN = unchecked((int)216),

            MLKEYCODE_RO = unchecked((int)217),

            MLKEYCODE_KANA = unchecked((int)218),

            MLKEYCODE_ASSIST = unchecked((int)219),

            MLKEYCODE_BRIGHTNESS_DOWN = unchecked((int)220),

            MLKEYCODE_BRIGHTNESS_UP = unchecked((int)221),

            MLKEYCODE_MEDIA_AUDIO_TRACK = unchecked((int)222),

            MLKEYCODE_SLEEP = unchecked((int)223),

            MLKEYCODE_WAKEUP = unchecked((int)224),

            MLKEYCODE_PAIRING = unchecked((int)225),

            MLKEYCODE_MEDIA_TOP_MENU = unchecked((int)226),

            MLKEYCODE_11 = unchecked((int)227),

            MLKEYCODE_12 = unchecked((int)228),

            MLKEYCODE_LAST_CHANNEL = unchecked((int)229),

            MLKEYCODE_TV_DATA_SERVICE = unchecked((int)230),

            MLKEYCODE_VOICE_ASSIST = unchecked((int)231),

            MLKEYCODE_TV_RADIO_SERVICE = unchecked((int)232),

            MLKEYCODE_TV_TELETEXT = unchecked((int)233),

            MLKEYCODE_TV_NUMBER_ENTRY = unchecked((int)234),

            MLKEYCODE_TV_TERRESTRIAL_ANALOG = unchecked((int)235),

            MLKEYCODE_TV_TERRESTRIAL_DIGITAL = unchecked((int)236),

            MLKEYCODE_TV_SATELLITE = unchecked((int)237),

            MLKEYCODE_TV_SATELLITE_BS = unchecked((int)238),

            MLKEYCODE_TV_SATELLITE_CS = unchecked((int)239),

            MLKEYCODE_TV_SATELLITE_SERVICE = unchecked((int)240),

            MLKEYCODE_TV_NETWORK = unchecked((int)241),

            MLKEYCODE_TV_ANTENNA_CABLE = unchecked((int)242),

            MLKEYCODE_TV_INPUT_HDMI_1 = unchecked((int)243),

            MLKEYCODE_TV_INPUT_HDMI_2 = unchecked((int)244),

            MLKEYCODE_TV_INPUT_HDMI_3 = unchecked((int)245),

            MLKEYCODE_TV_INPUT_HDMI_4 = unchecked((int)246),

            MLKEYCODE_TV_INPUT_COMPOSITE_1 = unchecked((int)247),

            MLKEYCODE_TV_INPUT_COMPOSITE_2 = unchecked((int)248),

            MLKEYCODE_TV_INPUT_COMPONENT_1 = unchecked((int)249),

            MLKEYCODE_TV_INPUT_COMPONENT_2 = unchecked((int)250),

            MLKEYCODE_TV_INPUT_VGA_1 = unchecked((int)251),

            MLKEYCODE_TV_AUDIO_DESCRIPTION = unchecked((int)252),

            MLKEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = unchecked((int)253),

            MLKEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = unchecked((int)254),

            MLKEYCODE_TV_ZOOM_MODE = unchecked((int)255),

            MLKEYCODE_TV_CONTENTS_MENU = unchecked((int)256),

            MLKEYCODE_TV_MEDIA_CONTEXT_MENU = unchecked((int)257),

            MLKEYCODE_TV_TIMER_PROGRAMMING = unchecked((int)258),

            MLKEYCODE_HELP = unchecked((int)259),

            MLKEYCODE_NAVIGATE_PREVIOUS = unchecked((int)260),

            MLKEYCODE_NAVIGATE_NEXT = unchecked((int)261),

            MLKEYCODE_NAVIGATE_IN = unchecked((int)262),

            MLKEYCODE_NAVIGATE_OUT = unchecked((int)263),

            MLKEYCODE_STEM_PRIMARY = unchecked((int)264),

            MLKEYCODE_STEM_1 = unchecked((int)265),

            MLKEYCODE_STEM_2 = unchecked((int)266),

            MLKEYCODE_STEM_3 = unchecked((int)267),

            MLKEYCODE_DPAD_UP_LEFT = unchecked((int)268),

            MLKEYCODE_DPAD_DOWN_LEFT = unchecked((int)269),

            MLKEYCODE_DPAD_UP_RIGHT = unchecked((int)270),

            MLKEYCODE_DPAD_DOWN_RIGHT = unchecked((int)271),

            MLKEYCODE_MEDIA_SKIP_FORWARD = unchecked((int)272),

            MLKEYCODE_MEDIA_SKIP_BACKWARD = unchecked((int)273),

            MLKEYCODE_MEDIA_STEP_FORWARD = unchecked((int)274),

            MLKEYCODE_MEDIA_STEP_BACKWARD = unchecked((int)275),

            MLKEYCODE_SOFT_SLEEP = unchecked((int)276),

            MLKEYCODE_CUT = unchecked((int)277),

            MLKEYCODE_COPY = unchecked((int)278),

            MLKEYCODE_PASTE = unchecked((int)279),

            MLKEYCODE_COUNT,
        }

        /// <summary>
        /// Modifier keys defined for Magic Leap platform
        /// </summary>
        public enum MLKeyModifier : int
        {
            MLKEYMODIFIER_ALT = unchecked((int)0x02),

            MLKEYMODIFIER_ALT_LEFT = unchecked((int)0x10),

            MLKEYMODIFIER_ALT_RIGHT = unchecked((int)0x20),

            MLKEYMODIFIER_SHIFT = unchecked((int)0x01),

            MLKEYMODIFIER_SHIFT_LEFT = unchecked((int)0x40),

            MLKEYMODIFIER_SHIFT_RIGHT = unchecked((int)0x80),

            MLKEYMODIFIER_SYM = unchecked((int)0x04),

            MLKEYMODIFIER_FUNCTION = unchecked((int)0x08),

            MLKEYMODIFIER_CTRL = unchecked((int)0x1000),

            MLKEYMODIFIER_CTRL_LEFT = unchecked((int)0x2000),

            MLKEYMODIFIER_CTRL_RIGHT = unchecked((int)0x4000),

            MLKEYMODIFIER_META = unchecked((int)0x10000),

            MLKEYMODIFIER_META_LEFT = unchecked((int)0x20000),

            MLKEYMODIFIER_META_RIGHT = unchecked((int)0x40000),

            MLKEYMODIFIER_CAPS_LOCK = unchecked((int)0x100000),

            MLKEYMODIFIER_NUM_LOCK = unchecked((int)0x200000),

            MLKEYMODIFIER_SCROLL_LOCK = unchecked((int)0x400000),
        }

        /// <summary>
        /// Touchpad gesture state
        /// </summary>
        public enum MLInputControllerTouchpadGestureState : int
        {
            /// <summary>
            /// End(Default)
            /// </summary>
            MLInputControllerTouchpadGestureState_End,

            /// <summary>
            /// Continue
            /// </summary>
            MLInputControllerTouchpadGestureState_Continue,

            /// <summary>
            /// Start
            /// </summary>
            MLInputControllerTouchpadGestureState_Start,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerTouchpadGestureState_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Recognized touchpad gesture types
        /// </summary>
        public enum MLInputControllerTouchpadGestureType : int
        {
            /// <summary>
            /// None
            /// </summary>
            MLInputControllerTouchpadGestureType_None,

            /// <summary>
            /// Tap This is a discrete gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_Tap,

            /// <summary>
            /// Force tap down This is a discrete gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_ForceTapDown,

            /// <summary>
            /// Force tap up This is a discrete gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_ForceTapUp,

            /// <summary>
            /// Force dwell This is a discrete gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_ForceDwell,

            /// <summary>
            /// Second force down This is a discrete gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_SecondForceDown,

            /// <summary>
            /// Long hold This is a continuous gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_LongHold,

            /// <summary>
            /// Radial scroll This is a continuous gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_RadialScroll,

            /// <summary>
            /// Swipe This is a continuous gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_Swipe,

            /// <summary>
            /// Scroll This is a continuous gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_Scroll,

            /// <summary>
            /// Pinch This is a continuous gesture
            /// </summary>
            MLInputControllerTouchpadGestureType_Pinch,

            /// <summary>
            /// Number of gesture types
            /// </summary>
            MLInputControllerTouchpadGestureType_Count,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerTouchpadGestureType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Direction of touchpad gesture
        /// </summary>
        public enum MLInputControllerTouchpadGestureDirection : int
        {
            /// <summary>
            /// None
            /// </summary>
            MLInputControllerTouchpadGestureDirection_None,

            /// <summary>
            /// Up
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Up,

            /// <summary>
            /// Down
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Down,

            /// <summary>
            /// Left
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Left,

            /// <summary>
            /// Right
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Right,

            /// <summary>
            /// In
            /// </summary>
            MLInputControllerTouchpadGestureDirection_In,

            /// <summary>
            /// Out
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Out,

            /// <summary>
            /// Clockwise
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Clockwise,

            /// <summary>
            /// Counter clockwise
            /// </summary>
            MLInputControllerTouchpadGestureDirection_CounterClockwise,

            /// <summary>
            /// Number of directions
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Count,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerTouchpadGestureDirection_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Types of input controllers recognized by Magic Leap platform
        /// </summary>
        public enum MLInputControllerType : int
        {
            /// <summary>
            /// None
            /// </summary>
            MLInputControllerType_None,

            /// <summary>
            /// Device
            /// </summary>
            MLInputControllerType_Device,

            /// <summary>
            /// Mobile app
            /// </summary>
            MLInputControllerType_MobileApp,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Buttons on input controllers (Magic Leap device and Mobile Companion App)
        /// </summary>
        public enum MLInputControllerButton : int
        {
            MLInputControllerButton_None,

            /// <summary>
            /// 
            /// </summary>
            /// <remarks>
            /// Move button is obsolete
            /// </remarks>
            MLInputControllerButton_Move,

            /// <summary>
            /// 
            /// </summary>
            /// <remarks>
            /// App button is obsolete
            /// </remarks>
            MLInputControllerButton_App,

            /// <summary>
            /// Bumper
            /// </summary>
            MLInputControllerButton_Bumper,

            /// <summary>
            /// Home tap
            /// The controller button cannot be polled, its is only available
            /// via callbacks
            /// </summary>
            MLInputControllerButton_HomeTap,

            /// <summary>
            /// Number of buttons
            /// </summary>
            MLInputControllerButton_Count,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerButton_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Feedback patterns for LED target
        /// </summary>
        public enum MLInputControllerFeedbackPatternLED : int
        {
            MLInputControllerFeedbackPatternLED_None,

            MLInputControllerFeedbackPatternLED_Clock1,

            MLInputControllerFeedbackPatternLED_Clock2,

            MLInputControllerFeedbackPatternLED_Clock3,

            MLInputControllerFeedbackPatternLED_Clock4,

            MLInputControllerFeedbackPatternLED_Clock5,

            MLInputControllerFeedbackPatternLED_Clock6,

            MLInputControllerFeedbackPatternLED_Clock7,

            MLInputControllerFeedbackPatternLED_Clock8,

            MLInputControllerFeedbackPatternLED_Clock9,

            MLInputControllerFeedbackPatternLED_Clock10,

            MLInputControllerFeedbackPatternLED_Clock11,

            MLInputControllerFeedbackPatternLED_Clock12,

            MLInputControllerFeedbackPatternLED_Clock1And7,

            MLInputControllerFeedbackPatternLED_Clock2And8,

            MLInputControllerFeedbackPatternLED_Clock3And9,

            MLInputControllerFeedbackPatternLED_Clock4And10,

            MLInputControllerFeedbackPatternLED_Clock5And11,

            MLInputControllerFeedbackPatternLED_Clock6And12,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerFeedbackPatternLED_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Feedback effects for LED target
        /// </summary>
        public enum MLInputControllerFeedbackEffectLED : int
        {
            MLInputControllerFeedbackEffectLED_RotateCW,

            MLInputControllerFeedbackEffectLED_RotateCCW,

            MLInputControllerFeedbackEffectLED_Pulse,

            MLInputControllerFeedbackEffectLED_PaintCW,

            MLInputControllerFeedbackEffectLED_PaintCCW,

            MLInputControllerFeedbackEffectLED_Blink,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerFeedbackEffectLED_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Feedback colors for LED target
        /// </summary>
        public enum MLInputControllerFeedbackColorLED : int
        {
            MLInputControllerFeedbackColorLED_BrightMissionRed,

            MLInputControllerFeedbackColorLED_PastelMissionRed,

            MLInputControllerFeedbackColorLED_BrightFloridaOrange,

            MLInputControllerFeedbackColorLED_PastelFloridaOrange,

            MLInputControllerFeedbackColorLED_BrightLunaYellow,

            MLInputControllerFeedbackColorLED_PastelLunaYellow,

            MLInputControllerFeedbackColorLED_BrightNebulaPink,

            MLInputControllerFeedbackColorLED_PastelNebulaPink,

            MLInputControllerFeedbackColorLED_BrightCosmicPurple,

            MLInputControllerFeedbackColorLED_PastelCosmicPurple,

            MLInputControllerFeedbackColorLED_BrightMysticBlue,

            MLInputControllerFeedbackColorLED_PastelMysticBlue,

            MLInputControllerFeedbackColorLED_BrightCelestialBlue,

            MLInputControllerFeedbackColorLED_PastelCelestialBlue,

            MLInputControllerFeedbackColorLED_BrightShaggleGreen,

            MLInputControllerFeedbackColorLED_PastelShaggleGreen,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerFeedbackColorLED_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Feedback effect speed for LED target
        /// </summary>
        public enum MLInputControllerFeedbackEffectSpeedLED : int
        {
            MLInputControllerFeedbackEffectSpeedLED_Slow,

            MLInputControllerFeedbackEffectSpeedLED_Medium,

            MLInputControllerFeedbackEffectSpeedLED_Fast,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerFeedbackEffectSpeedLED_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Feedback patterns for vibration, which can be applied to touchpad and body
        /// </summary>
        public enum MLInputControllerFeedbackPatternVibe : int
        {
            MLInputControllerFeedbackPatternVibe_None,

            MLInputControllerFeedbackPatternVibe_Click,

            MLInputControllerFeedbackPatternVibe_Bump,

            MLInputControllerFeedbackPatternVibe_DoubleClick,

            MLInputControllerFeedbackPatternVibe_Buzz,

            MLInputControllerFeedbackPatternVibe_Tick,

            MLInputControllerFeedbackPatternVibe_ForceDown,

            MLInputControllerFeedbackPatternVibe_ForceUp,

            MLInputControllerFeedbackPatternVibe_ForceDwell,

            MLInputControllerFeedbackPatternVibe_SecondForceDown,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerFeedbackPatternVibe_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Discrete intensity of feedback
        /// </summary>
        public enum MLInputControllerFeedbackIntensity : int
        {
            MLInputControllerFeedbackIntensity_Low,

            MLInputControllerFeedbackIntensity_Medium,

            MLInputControllerFeedbackIntensity_High,

            /// <summary>
            /// Ensure enum is represented as 32 bits
            /// </summary>
            MLInputControllerFeedbackIntensity_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Types of input tablet devices recognized
        /// @apilevel 5
        /// </summary>
        public enum MLInputTabletDeviceType : int
        {
            MLInputTabletDeviceType_Unknown = unchecked((int)0),

            MLInputTabletDeviceType_Wacom = unchecked((int)1),

            MLInputTabletDeviceType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Types of tools used with the tablet device
        /// @apilevel 5
        /// </summary>
        public enum MLInputTabletDeviceToolType : int
        {
            MLInputTabletDeviceToolType_Unknown = unchecked((int)0),

            MLInputTabletDeviceToolType_Pen = unchecked((int)1),

            MLInputTabletDeviceToolType_Eraser = unchecked((int)2),

            MLInputTabletDeviceTootlType_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Buttons on input tablet device
        /// @apilevel 5
        /// </summary>
        public enum MLInputTabletDeviceButton : int
        {
            MLInputTabletDeviceButton_Unknown,

            MLInputTabletDeviceButton_Button1,

            MLInputTabletDeviceButton_Button2,

            MLInputTabletDeviceButton_Button3,

            MLInputTabletDeviceButton_Button4,

            MLInputTabletDeviceButton_Button5,

            MLInputTabletDeviceButton_Button6,

            MLInputTabletDeviceButton_Button7,

            MLInputTabletDeviceButton_Button8,

            MLInputTabletDeviceButton_Button9,

            MLInputTabletDeviceButton_Button10,

            MLInputTabletDeviceButton_Button11,

            MLInputTabletDeviceButton_Button12,

            MLInputTabletDeviceButton_Count,

            MLInputTabletDeviceButton_Ensure32Bits = unchecked((int)0x7FFFFFFF),
        }

        /// <summary>
        /// Mask value to determine the validity of MLInputTabletDeviceStateMask
        /// @apilevel 5
        /// </summary>
        [Flags]
        public enum MLInputTabletDeviceStateMask : int
        {
            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasType = unchecked((int)1 << (int)0),

            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasToolType = unchecked((int)1 << (int)1),

            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasPenTouchPosAndForce = unchecked((int)1 << (int)2),

            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasAdditionalPenTouchData = unchecked((int)1 << (int)3),

            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasPenTouchActive = unchecked((int)1 << (int)4),

            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasConnectionState = unchecked((int)1 << (int)5),

            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasPenDistance = unchecked((int)1 << (int)6),

            /// <summary>
            /// Mask for determinig the validity of the additional pen data
            /// </summary>
            MLInputTabletDeviceStateMask_HasTimestamp = unchecked((int)1 << (int)7),
        }

        /// <summary>
        /// Information about a recognized touchpad gesture
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputControllerTouchpadGesture
        {
            /// <summary>
            /// Gesture position (x,y) and force (z)
            /// Position is in the [-10,10] range and force is in the [00,10] range
            /// </summary>
            public MlTypes.MLVec3f pos_and_force;

            /// <summary>
            /// Type of gesture
            /// </summary>
            public MlInput.MLInputControllerTouchpadGestureType type;

            /// <summary>
            /// Direction of gesture
            /// </summary>
            public MlInput.MLInputControllerTouchpadGestureDirection direction;

            /// <summary>
            /// Speed of gesture Note that this takes on different meanings depending
            /// on the gesture type being performed:
            /// - For radial gestures, this will be the angular speed around the axis
            /// - For pinch gestures, this will be the speed at which the distance
            /// between fingers is changing The touchpad is defined as having extents
            /// of [-10,10] so touchpad distance has a range of [00,20]; this value
            /// will be in touchpad distance per second
            /// </summary>
            public float speed;

            /// <summary>
            /// For radial gestures, this is the absolute value of the angle For scroll
            /// and pinch gestures, this is the absolute distance traveled in touchpad
            /// distance The touchpad is defined as having extents of [-10,10] so
            /// this distance has a range of [00,20]
            /// </summary>
            public float distance;

            /// <summary>
            /// Distance between the two fingers performing the gestures in touchpad
            /// distance The touchpad is defined as having extents of [-10,10] so
            /// this distance has a range of [00,20]
            /// </summary>
            public float finger_gap;

            /// <summary>
            /// For radial gestures, this is the radius of the gesture The touchpad
            /// is defined as having extents of [-10,10] so this radius has a range
            /// of [00,20]
            /// </summary>
            public float radius;

            /// <summary>
            /// Angle from the center of the touchpad to the finger in radians
            /// </summary>
            public float angle;
        }

        /// <summary>
        /// A structure containing callbacks for input controller events
        /// </summary>
        /// <remarks>
        /// The final parameter to all the callbacks is a void *, which will point to
        /// whatever payload data the user provides in MLInputSetControllerCallbacksEx
        /// Individual callbacks which are not required by the client can be NULL
        /// This structure must be initialized by calling MLInputControllerCallbacksExInit
        /// before use
        /// @apilevel 8
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputControllerCallbacksEx
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            public MlInput.MLInputControllerCallbacksEx.on_touchpad_gesture_delegate on_touchpad_gesture;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_touchpad_gesture_delegate(byte controller_id, in MlInput.MLInputControllerTouchpadGesture touchpad_gesture, IntPtr data);

            public MlInput.MLInputControllerCallbacksEx.on_touchpad_gesture_continue_delegate on_touchpad_gesture_continue;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_touchpad_gesture_continue_delegate(byte controller_id, in MlInput.MLInputControllerTouchpadGesture touchpad_gesture, IntPtr data);

            public MlInput.MLInputControllerCallbacksEx.on_touchpad_gesture_end_delegate on_touchpad_gesture_end;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_touchpad_gesture_end_delegate(byte controller_id, in MlInput.MLInputControllerTouchpadGesture touchpad_gesture, IntPtr data);

            public MlInput.MLInputControllerCallbacksEx.on_button_down_delegate on_button_down;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_button_down_delegate(byte controller_id, MlInput.MLInputControllerButton button, IntPtr data);

            public MlInput.MLInputControllerCallbacksEx.on_button_up_delegate on_button_up;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_button_up_delegate(byte controller_id, MlInput.MLInputControllerButton button, IntPtr data);

            public MlInput.MLInputControllerCallbacksEx.on_connect_delegate on_connect;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_connect_delegate(byte controller_id, IntPtr data);

            public MlInput.MLInputControllerCallbacksEx.on_disconnect_delegate on_disconnect;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_disconnect_delegate(byte controller_id, IntPtr data);
        }

        /// <summary>
        /// A structure containing information about the current state of an input controller
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputControllerState
        {
            /// <summary>
            /// Current touch position (x,y) and force (z)
            /// Position is in the [-10,10] range and force is in the [00,10] range
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)]
            public MlTypes.MLVec3f[] touch_pos_and_force;

            /// <summary>
            /// Normalized trigger value [00,10]
            /// </summary>
            public float trigger_normalized;

            /// <summary>
            /// Button states
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.U1, SizeConst = 5)]
            public bool[] button_state;

            /// <summary>
            /// Is touch active
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.U1, SizeConst = 2)]
            public bool[] is_touch_active;

            /// <summary>
            /// If this controller is connected
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_connected;

            /// <summary>
            /// Current touchpad gesture
            /// </summary>
            public MlInput.MLInputControllerTouchpadGesture touchpad_gesture;

            /// <summary>
            /// Current touchpad gesture state
            /// </summary>
            public MlInput.MLInputControllerTouchpadGestureState touchpad_gesture_state;

            /// <summary>
            /// Type of this controller
            /// </summary>
            public MlInput.MLInputControllerType type;

            /// <summary>
            /// Hardware index of this controller If it is a physical controller this
            /// will be either 0 or 1 If it is MLMA it will be 0xFF
            /// </summary>
            public byte hardware_index;

            public override string ToString()
            {
                return $"{nameof(MLInputControllerState)}{hardware_index}|{nameof(is_connected)}?{is_connected}|{nameof(type)}:{type}";
            }
        }

        /// <summary>
        /// A structure containing callbacks for input keyboard events The final
        /// parameter to all the callbacks is a void *, which will point to whatever
        /// payload data the user provides in MLInputSetKeyboardCallbacks Individual
        /// callbacks which are not required by the client can be NULL
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputKeyboardCallbacks
        {
            public MlInput.MLInputKeyboardCallbacks.on_char_delegate on_char;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_char_delegate(uint char_utf32, IntPtr data);

            public MlInput.MLInputKeyboardCallbacks.on_key_down_delegate on_key_down;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_key_down_delegate(MLKeyCode key_code, uint modifier_mask, IntPtr data);

            public MlInput.MLInputKeyboardCallbacks.on_key_up_delegate on_key_up;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_key_up_delegate(MLKeyCode key_code, uint modifier_mask, IntPtr data);
        }

        /// <summary>
        /// A structure containing information about the current keyboard state Note that
        /// all connected keyboards will be muxed together into one state
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputKeyboardState
        {
            /// <summary>
            /// Current state of keys: true if currently pressed, false otherwise
            /// </summary>
            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.U1, SizeConst = 280)]
            public bool[] key_state;

            /// <summary>
            /// Currently active modifier keys
            /// </summary>
            public uint modifier_mask;
        }

        /// <summary>
        /// A structure containing information about the state of the tablet device
        /// @apilevel 5
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct MLInputTabletDeviceState
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Type of this tablet device
            /// </summary>
            public MlInput.MLInputTabletDeviceType type;

            /// <summary>
            /// Type of tool used with the tablet
            /// </summary>
            public MlInput.MLInputTabletDeviceToolType tool_type;

            /// <summary>
            /// Current touch position (x,y) and force (z)
            /// Position is in the [-10,10] range and force is in the [00,10] range
            /// </summary>
            public MlTypes.MLVec3f pen_touch_pos_and_force;

            /// <summary>
            /// Additional coordinate values (x, y, z)
            /// It could contain data specific to the device type
            /// For example, it could hold tilt values while using pen
            /// </summary>
            public fixed int additional_pen_touch_data[3];

            /// <summary>
            /// Is touch active
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_pen_touch_active;

            /// <summary>
            /// If this tablet is connected
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool is_connected;

            /// <summary>
            /// Distance between pen and tablet
            /// </summary>
            public float pen_distance;

            /// <summary>
            /// Time stamp of the event
            /// </summary>
            public ulong timestamp;

            /// <summary>
            /// Flags to denote which of the above fields are valid
            /// MLInputTabletDeviceStateMask defines the bitmap
            /// </summary>
            public uint valid_fields_flag;
        }

        /// <summary>
        /// Stores a list of MLInputTabletDeviceState
        /// @apilevel 5
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputTabletDeviceStatesList
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Number of tablet device states in this list
            /// </summary>
            public uint count;

            /// <summary>
            /// Pointer referring to the array of MLInputTabletDeviceState
            /// </summary>
            public IntPtr data;
        }

        /// <summary>
        /// A structure to contain information about the connected devices
        /// @apilevel 5
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputConnectedDevicesList
        {
            /// <summary>
            /// Version of this structure
            /// </summary>
            public uint version;

            /// <summary>
            /// Number of connected controllers
            /// </summary>
            public uint connected_controller_count;

            /// <summary>
            /// Pointer to the array of connected controller IDs
            /// </summary>
            public IntPtr connected_controller_ids;

            /// <summary>
            /// Number of connected tablet devices
            /// </summary>
            public uint connected_tablet_device_count;

            /// <summary>
            /// Pointer to the array of connected tablet device IDs
            /// </summary>
            public IntPtr connected_tablet_device_ids;
        }

        /// <summary>
        /// A structure containing callbacks for input tablet device events
        /// </summary>
        /// <remarks>
        /// The final parameter to all the callbacks is a void *, which will point to whatever
        /// payload data the user provides in MLInputSetTabletDeviceCallbacks Individual
        /// callbacks which are not required by the client can be NULL
        /// @apilevel 5
        /// </remarks>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputTabletDeviceCallbacks
        {
            /// <summary>
            /// Version of this callback
            /// </summary>
            public uint version;

            public MlInput.MLInputTabletDeviceCallbacks.on_pen_touch_event_delegate on_pen_touch_event;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_pen_touch_event_delegate(byte tablet_device_id, in MlInput.MLInputTabletDeviceState tablet_device_state, IntPtr data);

            public MlInput.MLInputTabletDeviceCallbacks.on_touch_ring_event_delegate on_touch_ring_event;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_touch_ring_event_delegate(byte tablet_device_id, int touch_ring_value, ulong timestamp, IntPtr data);

            public MlInput.MLInputTabletDeviceCallbacks.on_button_down_delegate on_button_down;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_button_down_delegate(byte tablet_device_id, MlInput.MLInputTabletDeviceButton tablet_device_button, ulong timestamp, IntPtr data);

            public MlInput.MLInputTabletDeviceCallbacks.on_button_up_delegate on_button_up;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_button_up_delegate(byte tablet_device_id, MlInput.MLInputTabletDeviceButton tablet_device_button, ulong timestamp, IntPtr data);

            public MlInput.MLInputTabletDeviceCallbacks.on_connect_delegate on_connect;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_connect_delegate(byte tablet_device_id, IntPtr data);

            public MlInput.MLInputTabletDeviceCallbacks.on_disconnect_delegate on_disconnect;

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            public delegate void on_disconnect_delegate(byte tablet_device_id, IntPtr data);
        }

        /// <summary>
        /// Desired configuration of the input system
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MLInputConfiguration { }

        /// <summary>
        /// Returns an ASCII string for MLInputsResult and MLResult codes
        /// </summary>
        /// <param name="result">The input MLResult enum from MLInput functions</param>
        /// <returns>
        /// ASCII string containing readable version of result code
        /// </returns>
        /// <remarks>
        /// @apilevel 8
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.LPStr)]
        public static extern string MLInputGetResultString(MlApi.MLResult result);

        /// <summary>
        /// Create an input tracker
        /// MLResult_InvalidParam Input tracker was not created due to invalid out_handle
        /// MLResult_Ok Input tracker was created successfully
        /// MLResult_UnspecifiedFailure Input tracker was not created due to an unknown error
        /// MLInputResult_IllegalState Input tracker was not created because the service was in an unexpected state
        /// </summary>
        /// <param name="config">MLInputConfiguration specifying desired configuration Pass NULL for default configuration</param>
        /// <param name="out_handle">A handle to the created input tracker Only valid if the return value is MLResult_Ok</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputCreate(in MlInput.MLInputConfiguration config, ref MlApi.MLHandle out_handle);

        /// <summary>
        /// Sets the callbacks for controller input events
        /// MLResult_InvalidParam Failed to set the callback for controller input events due to an invalid handle
        /// MLResult_Ok Successfully set the callback for controller input events
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="controller_callbacks">Pointer to MLInputControllerCallbacksEx structure (can be NULL)</param>
        /// <param name="user_data">Pointer to user payload data; this will be the first argument
        /// passed to all the callback functions (can be NULL)</param>
        /// <remarks>
        /// @priv None
        /// @apilevel 8
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputSetControllerCallbacksEx(MlApi.MLHandle handle, in MlInput.MLInputControllerCallbacksEx controller_callbacks, IntPtr user_data);

        /// <summary>
        /// Return current state of all possible input controllers
        /// MLResult_InvalidParam Fetching the controller state failed due to an invalid handle
        /// MLResult_Ok Successfully fetched the controller state
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="out_state">Array, of at least size MLInput_MaxControllers, of
        /// MLInputControllerState structures that will be populated</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputGetControllerState(MlApi.MLHandle handle, [MarshalAs(UnmanagedType.LPArray, SizeConst = 2)] MlInput.MLInputControllerState[] out_state);

        /// <summary>
        /// Starts a vibe feedback pattern on the specified controller
        /// MLResult_InvalidParam Failed to start a vibe feedback pattern due to an invalid handle
        /// MLResult_Ok Successfully started a vibe feedback pattern on the specified controller
        /// MLResult_UnspecifiedFailure Failed to start a vibe feedback pattern due to an unknown error
        /// MLInputResult_DeviceNotFound Failed to start a vibe feedback pattern because the device was not found
        /// MLInputResult_IllegalState Failed to start a vibe feedback pattern because the service was in an unexpected state
        /// MLInputResult_PermissionDenied Failed to start a vibe feedback pattern because of permission denial
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="controller_id">ID of the input controller</param>
        /// <param name="pattern">Element of MLInputControllerFeedbackPatternVibe type specifying pattern to start</param>
        /// <param name="intensity">Element of MLInputControllerFeedbackIntensity type specifying intensity</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputStartControllerFeedbackPatternVibe(MlApi.MLHandle handle, byte controller_id, MlInput.MLInputControllerFeedbackPatternVibe pattern, MlInput.MLInputControllerFeedbackIntensity intensity);

        /// <summary>
        /// Starts a LED feedback pattern on the specified controller
        /// MLResult_InvalidParam Failed to start a LED feedback pattern due to an invalid handle
        /// MLResult_Ok Successfully started a LED feedback pattern on the specified controller
        /// MLResult_UnspecifiedFailure Failed to start a LED feedback pattern due to an unknown error
        /// MLInputResult_DeviceNotFound Failed to start a LED feedback pattern because the device was not found
        /// MLInputResult_IllegalState Failed to start a LED feedback pattern because the service was in an illegal state
        /// MLInputResult_PermissionDenied Failed to start a LED feedback pattern because of permission denial
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="controller_id">ID of the input controller</param>
        /// <param name="pattern">Element of MLInputControllerFeedbackPatternLED type specifying pattern to start</param>
        /// <param name="color">Element of MLInputControllerFeedbackColorLED type specifying color</param>
        /// <param name="duration">Duration in milliseconds</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputStartControllerFeedbackPatternLED(MlApi.MLHandle handle, byte controller_id, MlInput.MLInputControllerFeedbackPatternLED pattern, MlInput.MLInputControllerFeedbackColorLED color, uint duration);

        /// <summary>
        /// Starts a LED feedback effect using the specified pattern on the specified controller
        /// MLResult_InvalidParam Failed to start a LED feedback effect due to an invalid handle
        /// MLResult_Ok Successfully started a LED feedback effect using the specified pattern on the specified controller
        /// MLResult_UnspecifiedFailure Failed to start a LED feedback effect due to an unknown error
        /// MLInputResult_DeviceNotFound Failed to start a LED feedback effect because the device was not found
        /// MLInputResult_IllegalState Failed to start a LED feedback effect because the service was in an illegal state
        /// MLInputResult_PermissionDenied Failed to start a LED feedback effect because of permission denial
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="controller_id">ID of the input controller</param>
        /// <param name="effect">Element of MLInputControllerFeedbackEffectLED type specifying effect to start</param>
        /// <param name="speed">Element of MLInputControllerFeedbackEffectSpeedLED type specifying speed</param>
        /// <param name="pattern">Element of MLInputControllerFeedbackPatternLED type specifying pattern to use</param>
        /// <param name="color">Element of MLInputControllerFeedbackColorLED type specifying color</param>
        /// <param name="duration">Duration in milliseconds</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputStartControllerFeedbackPatternEffectLED(MlApi.MLHandle handle, byte controller_id, MlInput.MLInputControllerFeedbackEffectLED effect, MlInput.MLInputControllerFeedbackEffectSpeedLED speed, MlInput.MLInputControllerFeedbackPatternLED pattern, MlInput.MLInputControllerFeedbackColorLED color, uint duration);

        /// <summary>
        /// Sets the callbacks for keyboard input events
        /// MLResult_InvalidParam Failed to set the callback for keyboard input events due to an invalid handle
        /// MLResult_Ok Successfully set the callback for keyboard input events
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="keyboard_callbacks">Pointer to MLInputKeyboardCallbacks structure (can be NULL)</param>
        /// <param name="user_data">Pointer to user payload data; this will be the first argument
        /// passed to all the callback functions (can be NULL)</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputSetKeyboardCallbacks(MlApi.MLHandle handle, in MlInput.MLInputKeyboardCallbacks keyboard_callbacks, IntPtr user_data);

        /// <summary>
        /// Return current state of keyboard keys (down=true)
        /// MLResult_InvalidParam Failed to fetch the keyboard state due to an invalid handle
        /// MLResult_Ok Successfully fetched the keyboard state
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="out_state">Pointer to MLInputKeyboardState structure that will receive data</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputGetKeyboardState(MlApi.MLHandle handle, ref MlInput.MLInputKeyboardState out_state);

        /// <summary>
        /// Gets the device IDs of all connected devices
        /// MLResult_InvalidParam Failed to get the IDs of all connected devices
        /// MLResult_Ok Successfully fetched the IDs of the connected devices
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="out_devices">Pointer to MLInputConnectedDevicesList structure that will be populated
        /// The app should call MLInputReleaseConnectedDevicesList to release the contents after use</param>
        /// <remarks>
        /// @apilevel 5
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputGetConnectedDevices(MlApi.MLHandle handle, ref MlInput.MLInputConnectedDevicesList out_devices);

        /// <summary>
        /// Release the contents of MLInputConnectedDevicesList populated by MLInputGetConnectedDevices
        /// MLResult_Ok If operation was successful
        /// MLResult_InvalidParam Releasing the contents failed due to an invalid param
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="devices">Pointer to MLInputConnectedDevicesList struct Its contents will be released</param>
        /// <remarks>
        /// @apilevel 5
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputReleaseConnectedDevicesList(MlApi.MLHandle handle, ref MlInput.MLInputConnectedDevicesList devices);

        /// <summary>
        /// Sets the callbacks for tablet device input events
        /// MLResult_InvalidParam Failed to set the callback for tablet device input events due to an invalid param
        /// MLResult_Ok Successfully set the callbacks for tablet device input events
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="touch_device_callbacks">Pointer to MLInputTabletDeviceCallbacks structure (can be NULL)</param>
        /// <param name="user_data">Pointer to user payload data (can be NULL)</param>
        /// <remarks>
        /// @apilevel 5
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputSetTabletDeviceCallbacks(MlApi.MLHandle handle, in MlInput.MLInputTabletDeviceCallbacks touch_device_callbacks, IntPtr user_data);

        /// <summary>
        /// Return a list of states of the tablet device
        /// MLResult_Ok Successfully fetched the tablet device state
        /// MLResult_InvalidParam Fetching tablet device states failed due to an invalid param
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="tablet_device_id">ID of the tablet device to fetch the states from</param>
        /// <param name="out_state">Pointer to MLInputTabletDeviceStatesList structure that will be populated
        /// The app should call MLInputReleaseTabletDeviceStates to release the contents after use</param>
        /// <remarks>
        /// This API will return all the states of tablet device since the last query upto a maximum of 20 states
        /// The memory used to store the list is maintained by the library User should call
        /// MLInputReleaseTabletDeviceStates to release it
        /// @apilevel 5
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputGetTabletDeviceStates(MlApi.MLHandle handle, byte tablet_device_id, ref MlInput.MLInputTabletDeviceStatesList out_state);

        /// <summary>
        /// Release the contents of MLInputTabletDeviceStatesList populated by MLInputGetTabletDeviceStates
        /// MLResult_Ok If operation was successful
        /// MLResult_InvalidParam Releasing the contents failed due to an invalid param
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// </summary>
        /// <param name="handle">Handle to the input tracker</param>
        /// <param name="tablet_device_states">Pointer to MLInputTabletDeviceStatesList structure Its contents will be released</param>
        /// <remarks>
        /// @apilevel 5
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputReleaseTabletDeviceStates(MlApi.MLHandle handle, ref MlInput.MLInputTabletDeviceStatesList tablet_device_states);

        /// <summary>
        /// Destroy an input tracker
        /// MLResult_InvalidParam Failed to destroy the input tracker due to an invalid handle
        /// MLResult_Ok Successfully destroyed the input tracker
        /// MLResult_UnspecifiedFailure The operation failed with an unspecified error
        /// MLInputResult_IllegalState Input tracker could not be destroyed because the service was in an unexpected state
        /// </summary>
        /// <param name="handle">MLHandle to the input tracker to destroy</param>
        /// <remarks>
        /// @priv None
        /// </remarks>
        [DllImport("ml_input", CallingConvention = CallingConvention.Cdecl)]
        public static extern MlApi.MLResult MLInputDestroy(MlApi.MLHandle handle);
    }
}
